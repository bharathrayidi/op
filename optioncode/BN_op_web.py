{"cells":[{"cell_type":"code","execution_count":null,"id":"1fe54cc0","metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1718600348982,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"32f15ea8","vscode":{"languageId":"powershell"}},"outputs":[],"source":["from IPython.display import display, HTML,clear_output\n","# css = \"\"\"\n","# .output {\n","# flex-direction: row;\n","# flex-wrap: wrap;\n","# }\n","# \"\"\"\n","\n","# HTML('<style>{}</style>'.format(css))"]},{"cell_type":"code","execution_count":null,"id":"8599bbf1","metadata":{"executionInfo":{"elapsed":1699,"status":"ok","timestamp":1718600352364,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"bbc5a5b2","vscode":{"languageId":"powershell"}},"outputs":[],"source":["import warnings\n","warnings.simplefilter(action='ignore', category=FutureWarning)"]},{"cell_type":"code","execution_count":null,"id":"64b7e00d","metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1718600352365,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"e6eaa249","vscode":{"languageId":"powershell"}},"outputs":[],"source":["# !pip install pandasql"]},{"cell_type":"code","execution_count":null,"id":"c4d6565a","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15759,"status":"ok","timestamp":1718600368116,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"f0b3e52b","outputId":"1d000c73-76bc-417b-a239-66ee8001e52f","vscode":{"languageId":"powershell"}},"outputs":[],"source":["# !pip install lxml\n","!pip install --upgrade 'sqlalchemy<2.0'"]},{"cell_type":"code","execution_count":null,"id":"f2a9268c","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30617,"status":"ok","timestamp":1718600398725,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"MsT13S08F18-","outputId":"26495bac-96b5-43ec-a9fb-5c5a36d0151b","vscode":{"languageId":"powershell"}},"outputs":[],"source":["# from google.colab import drive\n","# drive.mount(\"/content/drive\")"]},{"cell_type":"code","execution_count":null,"id":"5dee879a","metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1718600398726,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"J9DdJomtF_Ce","vscode":{"languageId":"powershell"}},"outputs":[],"source":["# import sys\n","# # Add the path of the virtual environment site-packages to Colab's system path\n","# sys.path.append(\"/content/drive/MyDrive/virtual_env/lib/python3.10/site-packages\")"]},{"cell_type":"code","execution_count":null,"id":"4a3733da","metadata":{"executionInfo":{"elapsed":3023,"status":"ok","timestamp":1718600401741,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"b73540da","vscode":{"languageId":"powershell"}},"outputs":[],"source":["from pandasql import sqldf\n","import requests\n","import pandas as pd\n","import time\n","from bs4 import BeautifulSoup\n","#from pyspark.sql import SparkSession\n","#spark = SparkSession.builder.getOrCreate()"]},{"cell_type":"code","execution_count":null,"id":"4f0a7a54","metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1718600401742,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"PA5eHJ_WVHyp","vscode":{"languageId":"powershell"}},"outputs":[],"source":["pd.options.mode.copy_on_write = True"]},{"cell_type":"code","execution_count":null,"id":"8873f96e","metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1718600401742,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"9dc58e17","vscode":{"languageId":"powershell"}},"outputs":[],"source":["# url ='https://www.nseindia.com/api/option-chain-indices?symbol=BANKNIFTY'\n","# header = {\n","#     'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36',\n","#     'accept-encoding' : 'gzip, deflate, br',\n","#     'accept-language': 'en-US,en;q=0.9'\n","# }\n","# session = requests.Session()\n","# request = session.get(url,headers=header)"]},{"cell_type":"code","execution_count":null,"id":"4a1b70e9","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2810,"status":"ok","timestamp":1718600404545,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"17U9-n-WzfQn","outputId":"5d6eccbc-622c-4f50-e35a-d9d8f81bb987","vscode":{"languageId":"powershell"}},"outputs":[],"source":["url ='https://www.nseindia.com/api/option-chain-indices?symbol=BANKNIFTY'\n","header = {\n","    \"Connection\": \"keep-alive\",\n","    \"Cache-Control\": \"max-age=0\",\n","    \"DNT\": \"1\",\n","    \"Upgrade-Insecure-Requests\": \"1\",\n","    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \"\n","                  \"Chrome/111.0.0.0 Safari/537.36\",\n","    \"Sec-Fetch-User\": \"?1\", \"Accept\": \"*/*\", \"Sec-Fetch-Site\": \"none\", \"Sec-Fetch-Mode\": \"navigate\",\n","    \"Accept-Encoding\": \"gzip, deflate, br\", \"Accept-Language\": \"en-US,en;q=0.9,hi;q=0.8\"\n","    }\n","session = requests.Session()\n","nse_live = session.get(\"http://nseindia.com\", headers=header)\n","session.get(url, headers=header)"]},{"cell_type":"code","execution_count":null,"id":"07ac4f7b","metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1718600404545,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"006c8fcb","vscode":{"languageId":"powershell"}},"outputs":[],"source":["def MC_strickprice():\n","    url = 'https://www.google.com/finance/quote/NIFTY_BANK:INDEXNSE?hl=en'\n","    responce = requests.get(url)\n","    soup = BeautifulSoup(responce.text,'lxml')\n","    price = soup.find_all('div',{'class':'AHmHk'})[0].find('div',{'class':'YMlKec fxKbKc'}).text\n","    price = float(price.replace(',',''))\n","    return price"]},{"cell_type":"code","execution_count":null,"id":"c45b0a81","metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1718600404546,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"1a51dde3","vscode":{"languageId":"powershell"}},"outputs":[],"source":["# def MC_strickprice():\n","#     url = 'https://www.moneycontrol.com/indian-indices/nifty-bank-23.html'\n","#     responce = requests.get(url)\n","#     soup = BeautifulSoup(responce.text,'lxml')\n","#     price = soup.find_all('span',{'id':'sp_val'})[0].text\n","#     price = float(price.replace(',',''))\n","#     return price"]},{"cell_type":"code","execution_count":null,"id":"e41da885","metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1718600404546,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"89457c94","vscode":{"languageId":"powershell"}},"outputs":[],"source":["def dataframe(df):\n","    data = []\n","    for i in range(0,len(df)):\n","        calloi=callcoi=cltp=putoi=putcoi=pltp=0\n","        ctotaltradevaluem=ctotalBellq=ctotalSellq=ptotaltradevaluem=ptotalBellq=ptotalSellq=0\n","        pbidQty=pbidprice=paskQty=paskPrice=cbidQty=cbidprice=caskQty=caskPrice = 0\n","        stp = df['strikePrice'][i]\n","        if(df['CE'][i]==0):\n","            calloi = callcoi =0\n","        else:\n","            calloi = float(df['CE'][i]['openInterest'])\n","            callcoi = float(df['CE'][i]['changeinOpenInterest'])\n","            cltp    = float(df['CE'][i]['lastPrice'])\n","            ctotaltradevaluem  =float(df['CE'][i]['totalTradedVolume'])\n","            ctotalBellq = float(df['CE'][i]['totalBuyQuantity'])\n","            ctotalSellq = float(df['CE'][i]['totalSellQuantity'])\n","            cbidQty = float(df['CE'][i]['bidQty'])\n","            cbidprice = float(df['CE'][i]['bidprice'])\n","            caskQty = float(df['CE'][i]['askQty'])\n","            caskPrice = float(df['CE'][i]['askPrice'])\n","            CALL_iv = float(df['CE'][i]['impliedVolatility'])\n","            # cstp = float(df['CE'][i]['strikePrice'])\n","        if(df['PE'][i]==0):\n","            putoi = putcoi = 0\n","        else:\n","            putoi = float(df['PE'][i]['openInterest'])\n","            putcoi = float(df['PE'][i]['changeinOpenInterest'])\n","            pltp    = float(df['PE'][i]['lastPrice'])\n","            ptotaltradevaluem  = float(df['PE'][i]['totalTradedVolume'])\n","            ptotalBellq = float(df['PE'][i]['totalBuyQuantity'])\n","            ptotalSellq = float(df['PE'][i]['totalSellQuantity'])\n","            pbidQty = float(df['PE'][i]['bidQty'])\n","            pbidprice = float(df['PE'][i]['bidprice'])\n","            paskQty = float(df['PE'][i]['askQty'])\n","            paskPrice = float(df['PE'][i]['askPrice'])\n","            PUT_iv = float(df['PE'][i]['impliedVolatility'])\n","            pstp = float(df['PE'][i]['underlyingValue'])\n","\n","\n","        opdata = {\n","            'CALL_TTV':ctotaltradevaluem,'C_BID_Q': cbidQty,'C_BID_P' :cbidprice,'C_ASK_Q' :caskQty,'C_ASK_P' : caskPrice,\n","            'CALL_OI' : calloi,'CALL_CHNG_OI':callcoi,'total_call_OI':calloi+callcoi,'CALL_IV' : CALL_iv ,\n","            'CALL_BQ':ctotalBellq,'CALL_SA':ctotalSellq,'spread_call':caskQty-cbidprice,'STRICK_PRICE':stp,'PUT_TTV':ptotaltradevaluem\n","            ,'P_BID_Q': pbidQty,'P_BID_P' :pbidprice,'P_ASK_Q' :paskQty,'P_ASK_P' : paskPrice,'PUT_IV' : PUT_iv ,\n","            'PUT_SA':ptotalSellq,'PUT_BQ':ptotalBellq,'PUT_CHNG_OI':putcoi,'PUT_OI' : putoi,'total_put_OI':putcoi+putoi,'spread_put':paskQty-pbidprice,'current_stp':pstp}\n","        data.append(opdata)\n","    optionchain = pd.DataFrame(data)\n","    #optionchain =optionchain.append(optionchain[['CALL_OI','CALL_CHNG_OI','PUT_OI','PUT_CHNG_OI','CALL_TTV','PUT_TTV','CALL_BQ','PUT_BQ','CALL_SA','PUT_SA']].sum(),ignore_index=True).fillna(0)\n","    return optionchain\n"]},{"cell_type":"code","execution_count":null,"id":"7fb928a9","metadata":{"executionInfo":{"elapsed":2027,"status":"ok","timestamp":1718600406566,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"LOSVKdkgzFDY","vscode":{"languageId":"powershell"}},"outputs":[],"source":["request = session.get(url,headers=header).json()['filtered']['data']"]},{"cell_type":"code","execution_count":null,"id":"2ba2f382","metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1718600406567,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"c58e7d08","vscode":{"languageId":"powershell"}},"outputs":[],"source":["def main():\n","    # cookie = request.cookies\n","    # responce = session.get(url,headers=header,cookies=cookie).json()\n","    # raw_data = responce['filtered']\n","    request = session.get(url,headers=header).json()['filtered']['data']\n","    request_index = session.get(url,headers=header).json()['records']['index']\n","    # df1 = pd.DataFrame(raw_data['data']).fillna(0)\n","    df1 = pd.DataFrame(request).fillna(0)\n","    option_df = dataframe(df1)\n","    opdata = {\n","            'CALL_OI'  : float(option_df['CALL_OI'].sum()),\n","            'PUT_OI'   : float(option_df['PUT_OI'].sum()),\n","            'CALL_COI' : float(option_df['CALL_CHNG_OI'].sum()),\n","            'PUT_COI'  : float(option_df['PUT_CHNG_OI'].sum()),\n","            'CALL_VOL' : float(option_df['CALL_TTV'].sum()),\n","            'PUT_VOL'  : float(option_df['PUT_TTV'].sum()),\n","            'CALL_TBQ' : float(option_df['CALL_BQ'].sum()),\n","            'CALL_TSQ' : float(option_df['CALL_SA'].sum()),\n","            'PUT_TBQ'  : float(option_df['PUT_BQ'].sum()),\n","            'PUT_TSQ'  : float(option_df['PUT_SA'].sum()),\n","            # 'OI_RATIO'  : float(option_df['PUT_OI'].sum()/option_df['CALL_OI'].sum()),\n","            # 'COI_RATIO' : float(option_df['PUT_CHNG_OI'].sum()/option_df['CALL_CHNG_OI'].sum()),\n","            # 'VOL_DIFF' : float(option_df['CALL_TTV'].sum()/option_df['PUT_TTV'].sum()),\n","            'CALL_PER' : ((float(option_df['CALL_SA'].sum())+ float(option_df['CALL_BQ'].sum()))/ (float(option_df['CALL_BQ'].sum()) * float(option_df['CALL_SA'].sum()))) * 100 ,\n","            'PUT_PER' : ((float(option_df['PUT_SA'].sum()) + float(option_df['PUT_BQ'].sum())) / (float(option_df['PUT_BQ'].sum()) * float(option_df['PUT_SA'].sum()))) * 100 ,\n","            'BUY_DIFF': float((option_df['PUT_SA'].sum()+option_df['CALL_BQ'].sum())/(option_df['CALL_SA'].sum()+option_df['PUT_BQ'].sum())),\n","            'SELL_DIFF': float((option_df['CALL_SA'].sum()+option_df['PUT_BQ'].sum())/(option_df['PUT_SA'].sum()+option_df['CALL_BQ'].sum())),\n","            # 'CALL_OI_RATIO' : float(option_df['CALL_OI'].sum()/option_df['CALL_CHNG_OI'].sum()),\n","            # 'PUT_OI_RATIO' : float(option_df['PUT_OI'].sum()/option_df['PUT_CHNG_OI'].sum()),\n","                                   }\n","    #print(opdata)\n","    return opdata,option_df,request_index"]},{"cell_type":"code","execution_count":null,"id":"6d1bd774","metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1718600406567,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"371aed63","vscode":{"languageId":"powershell"}},"outputs":[],"source":["#max_CS = max_CB = max_PS = max_PB = max_CT = max_PT = max_COI = max_POI = 0\n","#max_CS1 = max_CB1 = max_PS1 = max_PB1 = max_CT1 = max_PT1 = max_COI1 = max_POI1 = 0"]},{"cell_type":"code","execution_count":null,"id":"afd732b2","metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1718600406567,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"04e48d29","vscode":{"languageId":"powershell"}},"outputs":[],"source":["def max_values(x,option_df,n):\n","    return   (sqldf('''SELECT {x}  \\\n","                            FROM \\\n","                                    (SELECT STRICK_PRICE  , {x},row_number()OVER (PARTITION BY STRICK_PRICE order by {x} DESC)\\\n","                                    AS rownumber FROM option_df)\\\n","                        WHERE rownumber = 1 order by {x} DESC LIMIT 5'''.format(x=x)).values)[n]"]},{"cell_type":"code","execution_count":null,"id":"9d8cbcb2","metadata":{"executionInfo":{"elapsed":861,"status":"ok","timestamp":1718600407424,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"d8b41570","vscode":{"languageId":"powershell"}},"outputs":[],"source":["def reurn_max(x,option_df,n):\n","\n","    return   (sqldf('''SELECT STRICK_PRICE  \\\n","                            FROM \\\n","                                    (SELECT STRICK_PRICE  , {x},row_number()OVER (PARTITION BY STRICK_PRICE order by {x} DESC)\\\n","                                    AS rownumber FROM option_df)\\\n","                        WHERE rownumber = 1 order by {x} DESC LIMIT 5'''.format(x=x)).values)[n]"]},{"cell_type":"code","execution_count":null,"id":"9946e76f","metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1718600407424,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"3c3a20be","vscode":{"languageId":"powershell"}},"outputs":[],"source":["def max_dict(option_df):\n","    max_dic = {\n","                'max_CS'   : [\n","                    reurn_max('CALL_SA',option_df,0)[0],\n","                    reurn_max('CALL_SA',option_df,1)[0],\n","                    reurn_max('CALL_SA',option_df,2)[0]\n","                ],\n","                'max_CB'   : [\n","                    reurn_max('CALL_BQ',option_df,0)[0],\n","                    reurn_max('CALL_BQ',option_df,1)[0],\n","                    reurn_max('CALL_BQ',option_df,2)[0]\n","                ],\n","                # 'max_CBIDQ'   : [\n","                #     reurn_max('C_BID_Q',option_df,0)[0],\n","                #     reurn_max('C_BID_Q',option_df,1)[0],\n","                #     reurn_max('C_BID_Q',option_df,2)[0]\n","                # ],\n","                # 'max_CBIDp'   : [\n","                #     reurn_max('C_BID_P',option_df,0)[0],\n","                #     reurn_max('C_BID_P',option_df,1)[0],\n","                #     reurn_max('C_BID_P',option_df,2)[0]\n","                # ],\n","                #  'max_CASKQ'   : [\n","                #     reurn_max('C_ASK_Q',option_df,0)[0],\n","                #     reurn_max('C_ASK_Q',option_df,1)[0],\n","                #     reurn_max('C_ASK_Q',option_df,2)[0]\n","                # ],\n","                # 'max_CASKP'   : [\n","                #     reurn_max('C_ASK_P',option_df,0)[0],\n","                #     reurn_max('C_ASK_P',option_df,1)[0],\n","                #     reurn_max('C_ASK_P',option_df,2)[0]\n","                # ],\n","                'max_CT'   : [\n","                    reurn_max('CALL_TTV',option_df,0)[0],\n","                    reurn_max('CALL_TTV',option_df,1)[0],\n","                    reurn_max('CALL_TTV',option_df,2)[0]\n","                ],\n","                 'max_CTOI'   : [\n","                    reurn_max('total_call_OI',option_df,0)[0],\n","                    reurn_max('total_call_OI',option_df,1)[0],\n","                    reurn_max('total_call_OI',option_df,2)[0]\n","                ],\n","                'max_COI'  : [\n","                    reurn_max('CALL_OI',option_df,0)[0],\n","                    reurn_max('CALL_OI',option_df,1)[0],\n","                    reurn_max('CALL_OI',option_df,2)[0]\n","                ],\n","                'max_CCOI' : [\n","                    reurn_max('CALL_CHNG_OI',option_df,0)[0],\n","                    reurn_max('CALL_CHNG_OI',option_df,1)[0],\n","                    reurn_max('CALL_CHNG_OI',option_df,2)[0]\n","                ],\n","                'STP'      : [int(option_df['current_stp'][0]),int(option_df['current_stp'][0]),int(option_df['current_stp'][0])],\n","\n","                'max_PCOI' : [\n","                    reurn_max('PUT_CHNG_OI',option_df,0)[0],\n","                    reurn_max('PUT_CHNG_OI',option_df,1)[0],\n","                    reurn_max('PUT_CHNG_OI',option_df,2)[0]\n","                ],\n","                'max_POI'  : [\n","                    reurn_max('PUT_OI',option_df,0)[0],\n","                    reurn_max('PUT_OI',option_df,1)[0],\n","                    reurn_max('PUT_OI',option_df,2)[0]\n","                ],\n","                'max_PTOI'   : [\n","                    reurn_max('total_put_OI',option_df,0)[0],\n","                    reurn_max('total_put_OI',option_df,1)[0],\n","                    reurn_max('total_put_OI',option_df,2)[0]\n","                ],\n","                'max_PT'   : [\n","                    reurn_max('PUT_TTV',option_df,0)[0],\n","                    reurn_max('PUT_TTV',option_df,1)[0],\n","                    reurn_max('PUT_TTV',option_df,2)[0]\n","                ],\n","                # 'max_PBIDQ'   : [\n","                #     reurn_max('P_BID_Q',option_df,0)[0],\n","                #     reurn_max('P_BID_Q',option_df,1)[0],\n","                #     reurn_max('P_BID_Q',option_df,2)[0]\n","                # ],\n","                # 'max_PBIDp'   : [\n","                #     reurn_max('P_BID_P',option_df,0)[0],\n","                #     reurn_max('P_BID_P',option_df,1)[0],\n","                #     reurn_max('P_BID_P',option_df,2)[0]\n","                # ],\n","                #  'max_PASKQ'   : [\n","                #     reurn_max('P_ASK_Q',option_df,0)[0],\n","                #     reurn_max('P_ASK_Q',option_df,1)[0],\n","                #     reurn_max('P_ASK_Q',option_df,2)[0]\n","                # ],\n","                # 'max_PASKP'   : [\n","                #     reurn_max('C_ASK_P',option_df,0)[0],\n","                #     reurn_max('C_ASK_P',option_df,1)[0],\n","                #     reurn_max('C_ASK_P',option_df,2)[0]\n","                # ],\n","                'max_PB'   : [\n","                    reurn_max('PUT_BQ',option_df,0)[0],\n","                    reurn_max('PUT_BQ',option_df,1)[0],\n","                    reurn_max('PUT_BQ',option_df,2)[0]\n","                ],\n","                'max_PS'   : [\n","                    reurn_max('PUT_SA',option_df,0)[0],\n","                    reurn_max('PUT_SA',option_df,1)[0],\n","                    reurn_max('PUT_SA',option_df,2)[0]\n","                ]\n","              }\n","    return max_dic"]},{"cell_type":"code","execution_count":null,"id":"347876e7","metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1718600407425,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"6fe6a59d","vscode":{"languageId":"powershell"}},"outputs":[],"source":["def max_dict_vlues(option_df):\n","    max_dic = {\n","                'max_CS'   : [\n","                    max_values('CALL_SA',option_df,0)[0],\n","                    max_values('CALL_SA',option_df,1)[0],\n","                    max_values('CALL_SA',option_df,2)[0]\n","                ],\n","                'max_CB'   : [\n","                    max_values('CALL_BQ',option_df,0)[0],\n","                    max_values('CALL_BQ',option_df,1)[0],\n","                    max_values('CALL_BQ',option_df,2)[0]\n","                ],\n","                # 'max_CBIDQ'   : [\n","                #     max_values('C_BID_Q',option_df,0)[0],\n","                #     max_values('C_BID_Q',option_df,1)[0],\n","                #     max_values('C_BID_Q',option_df,2)[0]\n","                # ],\n","                # 'max_CBIDp'   : [\n","                #     max_values('C_BID_P',option_df,0)[0],\n","                #     max_values('C_BID_P',option_df,1)[0],\n","                #     max_values('C_BID_P',option_df,2)[0]\n","                # ],\n","                #  'max_CASKQ'   : [\n","                #     max_values('C_ASK_Q',option_df,0)[0],\n","                #     max_values('C_ASK_Q',option_df,1)[0],\n","                #     max_values('C_ASK_Q',option_df,2)[0]\n","                # ],\n","                # 'max_CASKP'   : [\n","                #     max_values('C_ASK_P',option_df,0)[0],\n","                #     max_values('C_ASK_P',option_df,1)[0],\n","                #     max_values('C_ASK_P',option_df,2)[0]\n","                # ],\n","                'max_CT'   : [\n","                    max_values('CALL_TTV',option_df,0)[0],\n","                    max_values('CALL_TTV',option_df,1)[0],\n","                    max_values('CALL_TTV',option_df,2)[0]\n","                ],\n","                 'max_CTOI'   : [\n","                    max_values('total_call_OI',option_df,0)[0],\n","                    max_values('total_call_OI',option_df,1)[0],\n","                    max_values('total_call_OI',option_df,2)[0]\n","                ],\n","                'max_COI'  : [\n","                    max_values('CALL_OI',option_df,0)[0],\n","                    max_values('CALL_OI',option_df,1)[0],\n","                    max_values('CALL_OI',option_df,2)[0]\n","                ],\n","                'max_CCOI' : [\n","                    max_values('CALL_CHNG_OI',option_df,0)[0],\n","                    max_values('CALL_CHNG_OI',option_df,1)[0],\n","                    max_values('CALL_CHNG_OI',option_df,2)[0]\n","                ],\n","                'STP'      : [int(option_df['current_stp'][0]),int(option_df['current_stp'][0]),int(option_df['current_stp'][0])],\n","\n","                'max_PCOI' : [\n","                    max_values('PUT_CHNG_OI',option_df,0)[0],\n","                    max_values('PUT_CHNG_OI',option_df,1)[0],\n","                    max_values('PUT_CHNG_OI',option_df,2)[0]\n","                ],\n","                'max_POI'  : [\n","                    max_values('PUT_OI',option_df,0)[0],\n","                    max_values('PUT_OI',option_df,1)[0],\n","                    max_values('PUT_OI',option_df,2)[0]\n","                ],\n","                'max_PTOI'   : [\n","                    max_values('total_put_OI',option_df,0)[0],\n","                    max_values('total_put_OI',option_df,1)[0],\n","                    max_values('total_put_OI',option_df,2)[0]\n","                ],\n","                'max_PT'   : [\n","                    max_values('PUT_TTV',option_df,0)[0],\n","                    max_values('PUT_TTV',option_df,1)[0],\n","                    max_values('PUT_TTV',option_df,2)[0]\n","                ],\n","                # 'max_PBIDQ'   : [\n","                #     max_values('P_BID_Q',option_df,0)[0],\n","                #     max_values('P_BID_Q',option_df,1)[0],\n","                #     max_values('P_BID_Q',option_df,2)[0]\n","                # ],\n","                # # 'max_PBIDp'   : [\n","                #     max_values('P_BID_P',option_df,0)[0],\n","                #     max_values('P_BID_P',option_df,1)[0],\n","                #     max_values('P_BID_P',option_df,2)[0]\n","                # ],\n","                #  'max_PASKQ'   : [\n","                #     max_values('P_ASK_Q',option_df,0)[0],\n","                #     max_values('P_ASK_Q',option_df,1)[0],\n","                #     max_values('P_ASK_Q',option_df,2)[0]\n","                # ],\n","                # 'max_PASKP'   : [\n","                #     max_values('C_ASK_P',option_df,0)[0],\n","                #     max_values('C_ASK_P',option_df,1)[0],\n","                #     max_values('C_ASK_P',option_df,2)[0]\n","                # ],\n","                'max_PB'   : [\n","                    max_values('PUT_BQ',option_df,0)[0],\n","                    max_values('PUT_BQ',option_df,1)[0],\n","                    max_values('PUT_BQ',option_df,2)[0]\n","                ],\n","                'max_PS'   : [\n","                    max_values('PUT_SA',option_df,0)[0],\n","                    max_values('PUT_SA',option_df,1)[0],\n","                    max_values('PUT_SA',option_df,2)[0]\n","                ]\n","              }\n","    return max_dic"]},{"cell_type":"code","execution_count":null,"id":"1c63ccf6","metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1718600407425,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"3ff9c110","vscode":{"languageId":"powershell"}},"outputs":[],"source":["option_dataframe = pd.DataFrame(columns=['CALL_OI','PUT_OI','CALL_COI','PUT_COI' ,'CALL_VOL',\n","            'PUT_VOL','CALL_TBQ','CALL_TSQ','PUT_TBQ','PUT_TSQ',])\n","request_index = pd.DataFrame(columns=['key','index','indexSymbol',\n","'last','variation','percentChange','open','high','low','previousClose','yearHigh',\n","'yearLow','indicativeClose','pe','pb','dy','declines','advances','unchanged'])\n","max_df =  pd.DataFrame(columns=['max_CS','max_CB','max_CT','max_CTOI','max_COI','max_CCOI','STP',\n","                                'max_PCOI','max_POI','max_PTOI','max_PT','max_PB','max_PS'])\n","max_df_2 = pd.DataFrame(columns=['max_CS','max_CB','max_CBIDQ','max_CASKQ','max_CT','max_CTOI','max_COI','max_CCOI','STP',\n","                                'max_PCOI','max_POI','max_PTOI','max_PT','max_PBIDQ','max_PASKQ','max_PB','max_PS'])\n","max_df_3 =  pd.DataFrame(columns=['max_CS','max_CB','max_CT', 'max_COI','max_CCOI','STP','max_PCOI','max_POI','max_PT',\n","                            'max_PB','max_PS'])\n","\n","tmp_max_call = 0\n","tmp_max_put = 0"]},{"cell_type":"code","execution_count":null,"id":"d9f4c8c1","metadata":{"vscode":{"languageId":"powershell"}},"outputs":[],"source":["def generate_signals(data):\n","    # Initialize signal column\n","    data['Signal'] = 0\n","    \n","    # Calculate PUT and CALL signals\n","    put_condition = (data['PUT_TSQ'] > data['PUT_TSQ'].shift()) & (data['PUT_COI'] > data['PUT_COI'].shift())\n","    call_condition = (data['CALL_TSQ'] > data['CALL_TSQ'].shift()) & (data['CALL_COI'] > data['CALL_COI'].shift())\n","    \n","    # Set signal values\n","    data.loc[put_condition, 'Signal'] = 1  # Buy PUT signal\n","    data.loc[call_condition, 'Signal'] = -1  # Buy CALL signal\n","    \n","    return data"]},{"cell_type":"code","execution_count":null,"id":"47399151","metadata":{"vscode":{"languageId":"powershell"}},"outputs":[],"source":["import pandas as pd\n","\n","def analyze_trading_signals(df):\n","    results = []\n","    \n","    # Define thresholds for generating signals\n","    buy_diff_threshold = 1.5  # If BUY_DIFF is greater than this, consider buying calls\n","    sell_diff_threshold = 0.5  # If SELL_DIFF is less than this, consider buying puts\n","    oi_increase_threshold = 0  # Minimum threshold for an increase in OI (Open Interest)\n","    volume_threshold = 1e7  # Minimum volume to validate the signal\n","\n","    for index, row in df.iterrows():\n","        # Extract data for each row\n","        call_oi = row['CALL_OI']\n","        put_oi = row['PUT_OI']\n","        call_coi = row['CALL_COI']\n","        put_coi = row['PUT_COI']\n","        call_vol = row['CALL_VOL']\n","        put_vol = row['PUT_VOL']\n","        call_tbq = row['CALL_TBQ']\n","        call_tsq = row['CALL_TSQ']\n","        put_tbq = row['PUT_TBQ']\n","        put_tsq = row['PUT_TSQ']\n","        call_per = row['CALL_PER']\n","        put_per = row['PUT_PER']\n","        buy_diff = row['BUY_DIFF']\n","        sell_diff = row['SELL_DIFF']\n","    \n","\n","        # Calculate buyer and seller ratios\n","        total_call = call_tbq + call_tsq\n","        total_put = put_tbq + put_tsq\n","        \n","        call_buyer_ratio = (call_tbq / total_call) if total_call != 0 else 0\n","        put_buyer_ratio = (put_tbq / total_put) if total_put != 0 else 0\n","        call_seller_ratio = (call_tsq / total_call) if total_call != 0 else 0\n","        put_seller_ratio = (put_tsq / total_put) if total_put != 0 else 0\n","\n","        # Initialize default action\n","        action = 'No Action'\n","        \n","        # Determine if there is a \"Buy Call\" signal\n","        if (\n","        put_seller_ratio > call_seller_ratio and \n","            call_vol > volume_threshold and\n","            call_buyer_ratio > put_buyer_ratio):  # Adjust the ratio threshold as needed\n","            action = 'Buy Call'\n","        \n","        # Determine if there is a \"Buy Put\" signal\n","        elif (\n","        call_seller_ratio > put_seller_ratio and \n","              put_vol > volume_threshold and\n","              put_buyer_ratio > call_buyer_ratio):  # Adjust the ratio threshold as needed\n","            action = 'Buy Put'\n","        \n","        # Compile the result for this row\n","        results.append({\n","            'Action': action,\n","            'CALL_OI': call_oi,\n","            'PUT_OI': put_oi,\n","            'CALL_COI': call_coi,\n","            'PUT_COI': put_coi,\n","            'CALL_VOL': call_vol,\n","            'PUT_VOL': put_vol,\n","            'CALL_TBQ': call_tbq,\n","            'CALL_TSQ': call_tsq,\n","            'PUT_TBQ': put_tbq,\n","            'PUT_TSQ': put_tsq,\n","            # 'CALL_PER': call_per,\n","            # 'PUT_PER': put_per,\n","            'BUY_DIFF': buy_diff,\n","            'SELL_DIFF': sell_diff,\n","            'Call_BR': call_buyer_ratio,\n","            'Put_BR': put_buyer_ratio,\n","            'Call_SR': call_seller_ratio,\n","            'Put_SR': put_seller_ratio\n","        })\n","    \n","    return pd.DataFrame(results)\n","\n","# Example usage:\n","# Assuming you have a DataFrame `df` with the necessary columns\n","# df = pd.DataFrame(your_data)\n","# signals_df = analyze_trading_signals(df)\n","# print(signals_df)\n"]},{"cell_type":"code","execution_count":null,"id":"1d83f03a","metadata":{"vscode":{"languageId":"powershell"}},"outputs":[],"source":["def analyze_options_with_buyers_sellers(df):\n","    results = []\n","    \n","    # Parameters for sell price and stoploss (as percentage changes)\n","    sell_percentage = 1.10  # Sell when price increases by 10%\n","    stoploss_percentage = 0.95  # Stoploss when price decreases by 5%\n","    \n","    for index, row in df.iterrows():\n","        # Extract all relevant columns\n","        call_iv = row['CALL_IV']\n","        put_iv = row['PUT_IV']\n","        call_oi = row['CALL_OI']\n","        put_oi = row['PUT_OI']\n","        call_change_oi = row['CALL_CHNG_OI']\n","        put_change_oi = row['PUT_CHNG_OI']\n","        current_price = row['current_stp']\n","        strike_price = row['STRICK_PRICE']\n","        call_bid = row['C_BID_P']\n","        call_ask = row['C_ASK_P']\n","        put_bid = row['P_BID_P']\n","        put_ask = row['P_ASK_P']\n","        spread_call = row['spread_call']\n","        spread_put = row['spread_put']\n","        call_buyers = row[\"CALL_BQ\"]\n","        call_sellers = row[\"CALL_SA\"]\n","        put_buyers = row[\"PUT_BQ\"]\n","        put_sellers = row[\"PUT_SA\"]\n","\n","        # Calculate the Put-Call Ratio\n","        put_call_ratio = put_oi / call_oi if call_oi != 0 else float('inf')\n","\n","        # Calculate buyer and seller ratios\n","        total_call = call_buyers + call_sellers\n","        total_put = put_buyers + put_sellers\n","        \n","        call_buyer_ratio = (call_buyers / total_call) if total_call != 0 else 0\n","        put_buyer_ratio = (put_buyers / total_put) if total_put != 0 else 0\n","        call_seller_ratio = (call_sellers / total_call) if total_call != 0 else 0\n","        put_seller_ratio = (put_sellers / total_put) if total_put != 0 else 0\n","\n","        # Determine action, price to buy, sell price, and stoploss\n","        if put_oi > call_oi and put_change_oi>call_change_oi and call_buyer_ratio > put_buyer_ratio and put_seller_ratio > call_seller_ratio:\n","            action = 'Buy Call'\n","            price_to_buy = call_ask\n","            sell_price = price_to_buy * sell_percentage\n","            stoploss = price_to_buy * stoploss_percentage\n","        elif put_oi < call_oi and put_change_oi < call_change_oi and call_buyer_ratio < put_buyer_ratio and put_seller_ratio < call_seller_ratio:\n","            action = 'Buy Put'\n","            price_to_buy = put_ask\n","            sell_price = price_to_buy * sell_percentage\n","            stoploss = price_to_buy * stoploss_percentage\n","        else:\n","            action = 'No Action'\n","            price_to_buy = None\n","            sell_price = None\n","            stoploss = None\n","\n","        # Compile the results for each row of data\n","        results.append({\n","            'Action': action,\n","            'PTB': price_to_buy,\n","            'Sell Price': sell_price,\n","            'Stoploss': stoploss,\n","            'Call_IV': call_iv,\n","            'Call_OI': call_oi,\n","            'Call_COI': call_change_oi,\n","            'Call_BQ': call_buyers,\n","            'Call_SQ': call_sellers,\n","            'Current Price': current_price,\n","            'STP': strike_price,\n","            'Put_SQ': put_sellers,\n","            'Put_BQ': put_buyers,\n","            'Put_COI': put_change_oi,\n","            'Put_OI': put_oi,\n","            'Put_IV': put_iv,\n","            'Put-Call Ratio': put_call_ratio\n","        })\n","    \n","    return pd.DataFrame(results)\n"]},{"cell_type":"code","execution_count":null,"id":"ad04d6fd","metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1718600407425,"user":{"displayName":"Bharath Kumar","userId":"13231539308280552119"},"user_tz":-330},"id":"ef21ff54","vscode":{"languageId":"powershell"}},"outputs":[],"source":["def run_main(option_dataframe,max_df,max_df_2,max_df_3,tmp_max_call,tmp_max_put,request_index):\n","    while True:\n","        clear_output(wait=True)\n","        option_dataframe,option_df,request_index=option_dataframe._append(main()[0],ignore_index=True),main()[1],request_index._append(main()[2],ignore_index=True)\n","        option_dataframe.drop_duplicates(inplace = True)\n","        analysis_results = analyze_options_with_buyers_sellers(option_df)\n","        dis_option_dataframe = analyze_trading_signals(option_dataframe)\n","        price = int(option_df['current_stp'][0])\n","        max_dic = max_dict(option_df)\n","        max_dic_2= max_dict_vlues(option_df)\n","        range_price = list(range(round(price/100)*100-500,round(price/100)*100+500,100))\n","        max_dic = max_dict(option_df)\n","        max_dic_2= max_dict_vlues(option_df)\n","        max_df = max_df._append(pd.DataFrame(max_dic))\n","        max_df_2 = max_df_2._append(pd.DataFrame(max_dic_2))\n","        option_df['index_trading'] =  price\n","        display_df = option_df[['CALL_IV','spread_call','CALL_OI','CALL_CHNG_OI','CALL_BQ','CALL_SA','STRICK_PRICE',\n","                                'PUT_SA','PUT_BQ','PUT_CHNG_OI','PUT_OI','spread_put','PUT_IV']]\n","        option_dataframe = generate_signals(option_dataframe)\n","        clear_output(wait=True)\n","        display(dis_option_dataframe.tail(5))\n","        display(max_df.tail(3)\n","        # ,max_df_2.tail(3)\n","        ,analysis_results[(analysis_results.STP.isin(range_price))]\n","        # ,display_df[(display_df.STRICK_PRICE.isin(range_price))]\n","                )\n","        display(request_index.tail(3))\n","        time.sleep(2)\n"]},{"cell_type":"code","execution_count":27,"id":"ae4e1a18","metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":572},"id":"a12e4019"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Action</th>\n","      <th>CALL_OI</th>\n","      <th>PUT_OI</th>\n","      <th>CALL_COI</th>\n","      <th>PUT_COI</th>\n","      <th>CALL_VOL</th>\n","      <th>PUT_VOL</th>\n","      <th>CALL_TBQ</th>\n","      <th>CALL_TSQ</th>\n","      <th>PUT_TBQ</th>\n","      <th>PUT_TSQ</th>\n","      <th>BUY_DIFF</th>\n","      <th>SELL_DIFF</th>\n","      <th>Call_BR</th>\n","      <th>Put_BR</th>\n","      <th>Call_SR</th>\n","      <th>Put_SR</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Buy Put</td>\n","      <td>2495809.0</td>\n","      <td>1664985.0</td>\n","      <td>1218891.0</td>\n","      <td>780100.0</td>\n","      <td>17202602.0</td>\n","      <td>21741972.0</td>\n","      <td>9340695.0</td>\n","      <td>4294485.0</td>\n","      <td>9161595.0</td>\n","      <td>1942545.0</td>\n","      <td>0.838524</td>\n","      <td>1.192572</td>\n","      <td>0.685044</td>\n","      <td>0.825061</td>\n","      <td>0.314956</td>\n","      <td>0.174939</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Buy Put</td>\n","      <td>2494113.0</td>\n","      <td>1664929.0</td>\n","      <td>1217195.0</td>\n","      <td>780044.0</td>\n","      <td>17410229.0</td>\n","      <td>22043501.0</td>\n","      <td>9479115.0</td>\n","      <td>4253910.0</td>\n","      <td>9063885.0</td>\n","      <td>2015955.0</td>\n","      <td>0.863136</td>\n","      <td>1.158566</td>\n","      <td>0.690242</td>\n","      <td>0.818052</td>\n","      <td>0.309758</td>\n","      <td>0.181948</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Buy Put</td>\n","      <td>2512406.0</td>\n","      <td>1637614.0</td>\n","      <td>1235488.0</td>\n","      <td>752729.0</td>\n","      <td>17479238.0</td>\n","      <td>22135139.0</td>\n","      <td>9422835.0</td>\n","      <td>4263165.0</td>\n","      <td>9129840.0</td>\n","      <td>1988835.0</td>\n","      <td>0.852062</td>\n","      <td>1.173624</td>\n","      <td>0.688502</td>\n","      <td>0.821127</td>\n","      <td>0.311498</td>\n","      <td>0.178873</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Buy Put</td>\n","      <td>2525760.0</td>\n","      <td>1611028.0</td>\n","      <td>1248842.0</td>\n","      <td>726143.0</td>\n","      <td>17714906.0</td>\n","      <td>22600453.0</td>\n","      <td>9488385.0</td>\n","      <td>4119075.0</td>\n","      <td>8860395.0</td>\n","      <td>1760850.0</td>\n","      <td>0.866694</td>\n","      <td>1.153809</td>\n","      <td>0.697293</td>\n","      <td>0.834214</td>\n","      <td>0.302707</td>\n","      <td>0.165786</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Buy Put</td>\n","      <td>2526792.0</td>\n","      <td>1610964.0</td>\n","      <td>1249874.0</td>\n","      <td>726079.0</td>\n","      <td>17827301.0</td>\n","      <td>22776858.0</td>\n","      <td>9484680.0</td>\n","      <td>4182555.0</td>\n","      <td>9105360.0</td>\n","      <td>1804425.0</td>\n","      <td>0.849577</td>\n","      <td>1.177057</td>\n","      <td>0.693972</td>\n","      <td>0.834605</td>\n","      <td>0.306028</td>\n","      <td>0.165395</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    Action    CALL_OI     PUT_OI   CALL_COI   PUT_COI    CALL_VOL     PUT_VOL  \\\n","0  Buy Put  2495809.0  1664985.0  1218891.0  780100.0  17202602.0  21741972.0   \n","1  Buy Put  2494113.0  1664929.0  1217195.0  780044.0  17410229.0  22043501.0   \n","2  Buy Put  2512406.0  1637614.0  1235488.0  752729.0  17479238.0  22135139.0   \n","3  Buy Put  2525760.0  1611028.0  1248842.0  726143.0  17714906.0  22600453.0   \n","4  Buy Put  2526792.0  1610964.0  1249874.0  726079.0  17827301.0  22776858.0   \n","\n","    CALL_TBQ   CALL_TSQ    PUT_TBQ    PUT_TSQ  BUY_DIFF  SELL_DIFF   Call_BR  \\\n","0  9340695.0  4294485.0  9161595.0  1942545.0  0.838524   1.192572  0.685044   \n","1  9479115.0  4253910.0  9063885.0  2015955.0  0.863136   1.158566  0.690242   \n","2  9422835.0  4263165.0  9129840.0  1988835.0  0.852062   1.173624  0.688502   \n","3  9488385.0  4119075.0  8860395.0  1760850.0  0.866694   1.153809  0.697293   \n","4  9484680.0  4182555.0  9105360.0  1804425.0  0.849577   1.177057  0.693972   \n","\n","     Put_BR   Call_SR    Put_SR  \n","0  0.825061  0.314956  0.174939  \n","1  0.818052  0.309758  0.181948  \n","2  0.821127  0.311498  0.178873  \n","3  0.834214  0.302707  0.165786  \n","4  0.834605  0.306028  0.165395  "]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>max_CS</th>\n","      <th>max_CB</th>\n","      <th>max_CT</th>\n","      <th>max_CTOI</th>\n","      <th>max_COI</th>\n","      <th>max_CCOI</th>\n","      <th>STP</th>\n","      <th>max_PCOI</th>\n","      <th>max_POI</th>\n","      <th>max_PTOI</th>\n","      <th>max_PT</th>\n","      <th>max_PB</th>\n","      <th>max_PS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>52500</td>\n","      <td>52500</td>\n","      <td>52500</td>\n","      <td>53000</td>\n","      <td>53000</td>\n","      <td>52500</td>\n","      <td>52026</td>\n","      <td>52000</td>\n","      <td>52000</td>\n","      <td>52000</td>\n","      <td>52500</td>\n","      <td>43000</td>\n","      <td>52000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>53000</td>\n","      <td>62000</td>\n","      <td>53000</td>\n","      <td>52500</td>\n","      <td>53500</td>\n","      <td>53000</td>\n","      <td>52026</td>\n","      <td>52300</td>\n","      <td>50000</td>\n","      <td>52300</td>\n","      <td>52300</td>\n","      <td>52000</td>\n","      <td>51000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>54000</td>\n","      <td>54500</td>\n","      <td>52400</td>\n","      <td>54000</td>\n","      <td>54000</td>\n","      <td>54000</td>\n","      <td>52026</td>\n","      <td>52200</td>\n","      <td>51000</td>\n","      <td>50000</td>\n","      <td>52000</td>\n","      <td>43500</td>\n","      <td>52200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  max_CS max_CB max_CT max_CTOI max_COI max_CCOI    STP max_PCOI max_POI  \\\n","0  52500  52500  52500    53000   53000    52500  52026    52000   52000   \n","1  53000  62000  53000    52500   53500    53000  52026    52300   50000   \n","2  54000  54500  52400    54000   54000    54000  52026    52200   51000   \n","\n","  max_PTOI max_PT max_PB max_PS  \n","0    52000  52500  43000  52000  \n","1    52300  52300  52000  51000  \n","2    50000  52000  43500  52200  "]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Action</th>\n","      <th>PTB</th>\n","      <th>Sell Price</th>\n","      <th>Stoploss</th>\n","      <th>Call_IV</th>\n","      <th>Call_OI</th>\n","      <th>Call_COI</th>\n","      <th>Call_BQ</th>\n","      <th>Call_SQ</th>\n","      <th>Current Price</th>\n","      <th>STP</th>\n","      <th>Put_SQ</th>\n","      <th>Put_BQ</th>\n","      <th>Put_COI</th>\n","      <th>Put_OI</th>\n","      <th>Put_IV</th>\n","      <th>Put-Call Ratio</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>49</th>\n","      <td>No Action</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>17.61</td>\n","      <td>4185.0</td>\n","      <td>3284.0</td>\n","      <td>34515.0</td>\n","      <td>18225.0</td>\n","      <td>52026.5</td>\n","      <td>51500.0</td>\n","      <td>49575.0</td>\n","      <td>99870.0</td>\n","      <td>7621.0</td>\n","      <td>47961.0</td>\n","      <td>15.76</td>\n","      <td>11.460215</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>No Action</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>17.01</td>\n","      <td>964.0</td>\n","      <td>878.0</td>\n","      <td>9030.0</td>\n","      <td>9600.0</td>\n","      <td>52026.5</td>\n","      <td>51600.0</td>\n","      <td>32550.0</td>\n","      <td>55830.0</td>\n","      <td>14619.0</td>\n","      <td>19062.0</td>\n","      <td>15.39</td>\n","      <td>19.773859</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>No Action</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>16.75</td>\n","      <td>1783.0</td>\n","      <td>1531.0</td>\n","      <td>19545.0</td>\n","      <td>9225.0</td>\n","      <td>52026.5</td>\n","      <td>51700.0</td>\n","      <td>29085.0</td>\n","      <td>72900.0</td>\n","      <td>15474.0</td>\n","      <td>21216.0</td>\n","      <td>15.16</td>\n","      <td>11.899047</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>No Action</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>16.56</td>\n","      <td>5824.0</td>\n","      <td>4494.0</td>\n","      <td>27375.0</td>\n","      <td>18960.0</td>\n","      <td>52026.5</td>\n","      <td>51800.0</td>\n","      <td>43020.0</td>\n","      <td>84135.0</td>\n","      <td>17413.0</td>\n","      <td>23825.0</td>\n","      <td>14.82</td>\n","      <td>4.090831</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>No Action</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>16.25</td>\n","      <td>6999.0</td>\n","      <td>6674.0</td>\n","      <td>33885.0</td>\n","      <td>23025.0</td>\n","      <td>52026.5</td>\n","      <td>51900.0</td>\n","      <td>48195.0</td>\n","      <td>82755.0</td>\n","      <td>23793.0</td>\n","      <td>27939.0</td>\n","      <td>14.63</td>\n","      <td>3.991856</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>No Action</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>15.82</td>\n","      <td>43696.0</td>\n","      <td>32486.0</td>\n","      <td>163755.0</td>\n","      <td>110205.0</td>\n","      <td>52026.5</td>\n","      <td>52000.0</td>\n","      <td>145605.0</td>\n","      <td>321060.0</td>\n","      <td>64186.0</td>\n","      <td>97292.0</td>\n","      <td>14.31</td>\n","      <td>2.226565</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>No Action</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>15.54</td>\n","      <td>25710.0</td>\n","      <td>25266.0</td>\n","      <td>50820.0</td>\n","      <td>80925.0</td>\n","      <td>52026.5</td>\n","      <td>52100.0</td>\n","      <td>60885.0</td>\n","      <td>105405.0</td>\n","      <td>30440.0</td>\n","      <td>37033.0</td>\n","      <td>14.04</td>\n","      <td>1.440412</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>Buy Put</td>\n","      <td>439.00</td>\n","      <td>482.900</td>\n","      <td>417.0500</td>\n","      <td>15.22</td>\n","      <td>52311.0</td>\n","      <td>51569.0</td>\n","      <td>62235.0</td>\n","      <td>141045.0</td>\n","      <td>52026.5</td>\n","      <td>52200.0</td>\n","      <td>63420.0</td>\n","      <td>179130.0</td>\n","      <td>41421.0</td>\n","      <td>50015.0</td>\n","      <td>13.78</td>\n","      <td>0.956109</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>Buy Put</td>\n","      <td>490.55</td>\n","      <td>539.605</td>\n","      <td>466.0225</td>\n","      <td>14.99</td>\n","      <td>61580.0</td>\n","      <td>60816.0</td>\n","      <td>71685.0</td>\n","      <td>167055.0</td>\n","      <td>52026.5</td>\n","      <td>52300.0</td>\n","      <td>51645.0</td>\n","      <td>107640.0</td>\n","      <td>51150.0</td>\n","      <td>60497.0</td>\n","      <td>13.51</td>\n","      <td>0.982413</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>Buy Put</td>\n","      <td>547.80</td>\n","      <td>602.580</td>\n","      <td>520.4100</td>\n","      <td>14.77</td>\n","      <td>64697.0</td>\n","      <td>62002.0</td>\n","      <td>63765.0</td>\n","      <td>164475.0</td>\n","      <td>52026.5</td>\n","      <td>52400.0</td>\n","      <td>34935.0</td>\n","      <td>79005.0</td>\n","      <td>34148.0</td>\n","      <td>43857.0</td>\n","      <td>13.29</td>\n","      <td>0.677883</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       Action     PTB  Sell Price  Stoploss  Call_IV  Call_OI  Call_COI  \\\n","49  No Action     NaN         NaN       NaN    17.61   4185.0    3284.0   \n","50  No Action     NaN         NaN       NaN    17.01    964.0     878.0   \n","51  No Action     NaN         NaN       NaN    16.75   1783.0    1531.0   \n","52  No Action     NaN         NaN       NaN    16.56   5824.0    4494.0   \n","53  No Action     NaN         NaN       NaN    16.25   6999.0    6674.0   \n","54  No Action     NaN         NaN       NaN    15.82  43696.0   32486.0   \n","55  No Action     NaN         NaN       NaN    15.54  25710.0   25266.0   \n","56    Buy Put  439.00     482.900  417.0500    15.22  52311.0   51569.0   \n","57    Buy Put  490.55     539.605  466.0225    14.99  61580.0   60816.0   \n","58    Buy Put  547.80     602.580  520.4100    14.77  64697.0   62002.0   \n","\n","     Call_BQ   Call_SQ  Current Price      STP    Put_SQ    Put_BQ  Put_COI  \\\n","49   34515.0   18225.0        52026.5  51500.0   49575.0   99870.0   7621.0   \n","50    9030.0    9600.0        52026.5  51600.0   32550.0   55830.0  14619.0   \n","51   19545.0    9225.0        52026.5  51700.0   29085.0   72900.0  15474.0   \n","52   27375.0   18960.0        52026.5  51800.0   43020.0   84135.0  17413.0   \n","53   33885.0   23025.0        52026.5  51900.0   48195.0   82755.0  23793.0   \n","54  163755.0  110205.0        52026.5  52000.0  145605.0  321060.0  64186.0   \n","55   50820.0   80925.0        52026.5  52100.0   60885.0  105405.0  30440.0   \n","56   62235.0  141045.0        52026.5  52200.0   63420.0  179130.0  41421.0   \n","57   71685.0  167055.0        52026.5  52300.0   51645.0  107640.0  51150.0   \n","58   63765.0  164475.0        52026.5  52400.0   34935.0   79005.0  34148.0   \n","\n","     Put_OI  Put_IV  Put-Call Ratio  \n","49  47961.0   15.76       11.460215  \n","50  19062.0   15.39       19.773859  \n","51  21216.0   15.16       11.899047  \n","52  23825.0   14.82        4.090831  \n","53  27939.0   14.63        3.991856  \n","54  97292.0   14.31        2.226565  \n","55  37033.0   14.04        1.440412  \n","56  50015.0   13.78        0.956109  \n","57  60497.0   13.51        0.982413  \n","58  43857.0   13.29        0.677883  "]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>index</th>\n","      <th>indexSymbol</th>\n","      <th>last</th>\n","      <th>variation</th>\n","      <th>percentChange</th>\n","      <th>open</th>\n","      <th>high</th>\n","      <th>low</th>\n","      <th>previousClose</th>\n","      <th>yearHigh</th>\n","      <th>yearLow</th>\n","      <th>indicativeClose</th>\n","      <th>pe</th>\n","      <th>pb</th>\n","      <th>dy</th>\n","      <th>declines</th>\n","      <th>advances</th>\n","      <th>unchanged</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>SECTORAL INDICES</td>\n","      <td>NIFTY BANK</td>\n","      <td>NIFTY BANK</td>\n","      <td>51999.20</td>\n","      <td>-923.40</td>\n","      <td>-1.74</td>\n","      <td>52314.45</td>\n","      <td>52582.95</td>\n","      <td>51987.25</td>\n","      <td>52922.6</td>\n","      <td>54467.35</td>\n","      <td>42105.4</td>\n","      <td>0</td>\n","      <td>14.83</td>\n","      <td>2.38</td>\n","      <td>0.95</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SECTORAL INDICES</td>\n","      <td>NIFTY BANK</td>\n","      <td>NIFTY BANK</td>\n","      <td>52018.75</td>\n","      <td>-903.85</td>\n","      <td>-1.71</td>\n","      <td>52314.45</td>\n","      <td>52582.95</td>\n","      <td>51976.20</td>\n","      <td>52922.6</td>\n","      <td>54467.35</td>\n","      <td>42105.4</td>\n","      <td>0</td>\n","      <td>14.83</td>\n","      <td>2.38</td>\n","      <td>0.95</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SECTORAL INDICES</td>\n","      <td>NIFTY BANK</td>\n","      <td>NIFTY BANK</td>\n","      <td>51971.25</td>\n","      <td>-951.35</td>\n","      <td>-1.80</td>\n","      <td>52314.45</td>\n","      <td>52582.95</td>\n","      <td>51956.15</td>\n","      <td>52922.6</td>\n","      <td>54467.35</td>\n","      <td>42105.4</td>\n","      <td>0</td>\n","      <td>14.83</td>\n","      <td>2.38</td>\n","      <td>0.95</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                key       index indexSymbol      last  variation  \\\n","2  SECTORAL INDICES  NIFTY BANK  NIFTY BANK  51999.20    -923.40   \n","3  SECTORAL INDICES  NIFTY BANK  NIFTY BANK  52018.75    -903.85   \n","4  SECTORAL INDICES  NIFTY BANK  NIFTY BANK  51971.25    -951.35   \n","\n","   percentChange      open      high       low  previousClose  yearHigh  \\\n","2          -1.74  52314.45  52582.95  51987.25        52922.6  54467.35   \n","3          -1.71  52314.45  52582.95  51976.20        52922.6  54467.35   \n","4          -1.80  52314.45  52582.95  51956.15        52922.6  54467.35   \n","\n","   yearLow indicativeClose     pe    pb    dy declines advances unchanged  \n","2  42105.4               0  14.83  2.38  0.95       12        0         0  \n","3  42105.4               0  14.83  2.38  0.95       12        0         0  \n","4  42105.4               0  14.83  2.38  0.95       12        0         0  "]},"metadata":{},"output_type":"display_data"}],"source":["def main_dis_run(option_dataframe,max_df,max_df_2,max_df_3,tmp_max_call,tmp_max_put,request_index):\n","   try:\n","         clear_output(wait=True)\n","         run_main(option_dataframe,max_df,max_df_2,max_df_3,tmp_max_call,tmp_max_put,request_index)\n","   except Exception as e:\n","         clear_output(wait=True)\n","         print(f'trying to retry to re-slove issue')\n","      #    raise e\n","         main_dis_run(option_dataframe,max_df,max_df_2,max_df_3,tmp_max_call,tmp_max_put,request_index)\n","\n","main_dis_run(option_dataframe, max_df, max_df_2,max_df_3,tmp_max_call, tmp_max_put,request_index)"]},{"cell_type":"code","execution_count":null,"id":"70d165db","metadata":{},"outputs":[],"source":[]}],"metadata":{"colab":{"name":"","version":""},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.4"}},"nbformat":4,"nbformat_minor":5}
